commit 99e28ca8220b0c004ceb498a042dcc543d760fe6
Author: Ken Pratt <ken@kenpratt.net>
Date:   Fri Dec 9 14:53:59 2011 -0800

    Fixed shallow vs. deep list conversion.

diff --git a/src/library/extra_lib.js b/src/library/extra_lib.js
index 1d24ee0..5956b2a 100644
--- a/src/library/extra_lib.js
+++ b/src/library/extra_lib.js
@@ -149,9 +149,9 @@ if( typeof(BiwaScheme)!='object' ) BiwaScheme={}; with(BiwaScheme) {
         result = spec.cdr.cdr.car;
     var tlimit = BiwaScheme.gensym();
 
-    var do_vars = List([tlimit, limit],
-                       [variable, 0, [Sym("+"), variable, 1]]);
-    var do_check = List([Sym(">="), variable, tlimit], result);
+    var do_vars = deep_array_to_list([[tlimit, limit],
+                                      [variable, 0, [Sym("+"), variable, 1]]]);
+    var do_check = deep_array_to_list([[Sym(">="), variable, tlimit], result]);
 
     return new Pair(Sym("do"),
              new Pair(do_vars,
diff --git a/src/library/r6rs_lib.js b/src/library/r6rs_lib.js
index 884d08a..aa74ec8 100644
--- a/src/library/r6rs_lib.js
+++ b/src/library/r6rs_lib.js
@@ -1980,7 +1980,7 @@ if( typeof(BiwaScheme)!='object' ) BiwaScheme={}; with(BiwaScheme) {
     //     (define set-square-h!
     //       (record-mutator (record-type-descriptor square) 1)))
     //
-    return List.apply(null,
+    return deep_array_to_list(
       [Sym("begin"),
         registration,
         [Sym("define"), constructor_name, [Sym("record-constructor"), cd]],
@@ -2000,7 +2000,7 @@ if( typeof(BiwaScheme)!='object' ) BiwaScheme={}; with(BiwaScheme) {
 
   //(record-type-descriptor <record name>)    syntax 
   define_syntax("record-type-descriptor", function(x){
-    return List(Sym("_record-type-descriptor"), [Sym("quote"), x.cdr.car]);
+    return deep_array_to_list([Sym("_record-type-descriptor"), [Sym("quote"), x.cdr.car]]);
   });
   define_libfunc("_record-type-descriptor", 1, 1, function(ar){
     assert_symbol(ar[0]);
@@ -2013,7 +2013,7 @@ if( typeof(BiwaScheme)!='object' ) BiwaScheme={}; with(BiwaScheme) {
 
   //(record-constructor-descriptor <record name>)    syntax 
   define_syntax("record-constructor-descriptor", function(x){
-    return List(Sym("_record-constructor-descriptor"), [Sym("quote"), x.cdr.car]);
+    return deep_array_to_list([Sym("_record-constructor-descriptor"), [Sym("quote"), x.cdr.car]]);
   });
   define_libfunc("_record-constructor-descriptor", 1, 1, function(ar){
     assert_symbol(ar[0]);
diff --git a/src/system/interpreter.js b/src/system/interpreter.js
index 98755f8..878d879 100644
--- a/src/system/interpreter.js
+++ b/src/system/interpreter.js
@@ -415,7 +415,7 @@ BiwaScheme.Interpreter = BiwaScheme.Class.create({
         }
         else{
           var expanded_car = this.expand(x.car, flag);
-          var expanded_cdr = BiwaScheme.shallow_array_to_list(
+          var expanded_cdr = BiwaScheme.array_to_list(
                                _.map(x.cdr.to_array(),
                                      _.bind(function(item){ return this.expand(item, flag); }, this)));
           ret = new BiwaScheme.Pair(expanded_car, expanded_cdr);
diff --git a/src/system/pair.js b/src/system/pair.js
index 3973bcd..a091795 100644
--- a/src/system/pair.js
+++ b/src/system/pair.js
@@ -102,27 +102,35 @@ BiwaScheme.Pair = BiwaScheme.Class.create({
   }
 });
 
-// Creates a list out of the arguments, converting any nested arrays into nested lists.
+// Creates a list out of the arguments, optionally converting any nested arrays into nested lists if the deep argument is true.
 // Example:
-//   BiwaScheme.List(1, 2, [3, 4]) ;=> (1 2 (3 4))
+//   BiwaScheme.List(1, 2, [3, 4]) ;=> (list 1 2 (vector 3 4))
+//   BiwaScheme.deep_array_to_list(1, 2, [3, 4]) ;=> (list 1 2 (list 3 4))
 var array_to_list = function(ary, deep) {
   var list = BiwaScheme.nil;
   for(var i=ary.length-1; i>=0; i--){
     var obj = ary[i];
     if(deep && _.isArray(obj) && !obj.is_vector){
-      obj = BiwaScheme.array_to_list(obj);
+      obj = array_to_list(obj, deep);
     }
     list = new BiwaScheme.Pair(obj, list);
   }
   return list;
 }
+
+// Shallow: List(1, 2, [3]) == (list 1 2 (vector 3 4))
 BiwaScheme.List = function() {
   var ary = _.toArray(arguments);
-  return array_to_list(ary, true);
-};
-BiwaScheme.array_to_list = function(array) {
-  return BiwaScheme.List.apply(null, array);
+  return array_to_list(ary, false);
 };
-BiwaScheme.shallow_array_to_list = function(ary) {
+
+// Shallow: array_to_list(1, 2, [3]) == (list 1 2 (vector 3 4))
+BiwaScheme.array_to_list = function(ary) {
   return array_to_list(ary, false);
 };
+
+// Deep: deep_array_to_list(1, 2, [3, 4]) == (list 1 2 (list 3 4))
+// deep_array_to_list([1, 2, 3]) - deep
+BiwaScheme.deep_array_to_list = function(ary) {
+  return array_to_list(ary, true);
+};
diff --git a/test/unit.js b/test/unit.js
index c1c2e45..f94b5f6 100644
--- a/test/unit.js
+++ b/test/unit.js
@@ -154,19 +154,27 @@ describe('utilities', {
       expect( inspect(obj2) ).should_be("obj2");
     }
   },
+  'List()' : function(){
+    with(BiwaScheme){
+      expect( List(1,2,3) instanceof Pair ).should_be(true);
+      expect( List(1,2,3).to_write() ).should_be("(1 2 3)");
+      expect( List(1,2,[3,4]).to_write() ).should_be("(1 2 #(3 4))");
+    }
+  },
   'array_to_list' : function(){
     with(BiwaScheme){
       expect( array_to_list([1,2,3]).to_write() ).should_be("(1 2 3)");
+      expect( array_to_list([1,2,[3,4]]).to_write() ).should_be("(1 2 #(3 4))");
     }
   },
-  'List()' : function(){
+  'deep_array_to_list' : function(){
     with(BiwaScheme){
-      expect( List(1,2,3) instanceof Pair ).should_be(true);
-      expect( List(1,2,3).to_write() ).should_be("(1 2 3)");
-      expect( List(1,2,[3,4]).to_write() ).should_be("(1 2 (3 4))");
-      expect( List(
+      expect( deep_array_to_list([1,2,3]).to_write() ).should_be("(1 2 3)");
+      expect( deep_array_to_list([1,2,[3,4]]).to_write() ).should_be("(1 2 (3 4))");
+      expect( deep_array_to_list([
         Sym("define"), Sym("x"), [Sym("+"), 1, 2]
-      ).to_write() ).should_be("(define x (+ 1 2))");
+      ]).to_write() ).should_be("(define x (+ 1 2))");
+      expect( deep_array_to_list([[1,2],[3,[4,[5,6]]]]).to_write() ).should_be("((1 2) (3 (4 (5 6))))");
     }
   },
   'reduce_cyclic_info' : function(){
