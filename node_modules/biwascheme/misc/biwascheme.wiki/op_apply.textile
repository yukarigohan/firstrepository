Invokes Scheme closure, library function or JS function. (-> [[IntermediateLanguage]])

h1. format

<pre><code>["apply"]</code></pre>

h1. description

In contrast to other opecodes, op_apply takes no arguments. Instead it retrieves needed information from the stack.

Before calling op_apply, you must put these values onto stack:

* func: closure or function to apply
* n_args: number of arguments
* arg1: first argument
* arg2: second argument
* arg3: third argument
* x // usually stack frame is already prepared by [[op_frame]]
* f
* c

h2. applicable things

* Scheme closure
** a JS array
* Library function (map, +, etc.)
** a JS function which takes args(array) and intp(Interpreter) as arguments

Note that you cannot invoke pure JS functions directly. You can use js-call or js-invoke instead.

h1. example

program:
<pre><code>(+ 11 22)</code></pre>

compiled:
<pre><code>[frame
   [constant 22  
   [argument          // push 22 (second argument) to stack
   [constant 11  
   [argument          // push 11 (first argument) to stack
   [constant 2   
   [argument          // push 2 (number of arguments) to stack
   [refer-global "+"  // load function '+' to 'a' register
   [apply]]]]]]]]     // invoke the function with arguments 11 and 22
[halt]]</code></pre>
