;; BiwaScheme source Scheme script file

;; author: Damien Mattei

(define debug #f)

(load "scheme/macrotic-sugar.scm") ;; load macro definitions

(define (string-contains-pos str1 str2 pos)
					;(print "str1=")
					;(print str1)
					;(print "str2=")
					;(print str2)
					;(print "substring :")
					;(print (substring str1 
					;                            0 
					;                            (string-length str2)))
  (cond ((< (string-length str1) (string-length str2)) #f)

	((string=? str2 
		   (substring str1 
			      0 
			      (string-length str2)))
	 pos)

	(else
					;(begin
					;(print " string-contains-pos :  else")
	 (string-contains-pos
	  (substring str1 1 (string-length str1))
	  str2
	  (+ 1 pos)))))#;)

(define (string-contains str1 str2)
  (string-contains-pos str1 str2 0))


;; get the javascript function
(define js-String-Contains (js-eval "jsStringContains"))

;; wrapper
(define (String-Contains str1 str2)
  (js-call js-String-Contains str1 str2))

;; fetch the web file from server
(define wp (http-request "ObservateursCodes.html"))

;; find the table_observateurs id
(define str-to-find "table_observateurs")

;; find beginning of table
(define id-pos (String-Contains wp str-to-find))
;;(define table-begin-pos (+ id-pos (string-length str-to-find)))

(if debug
    (begin
      (print id-pos)
      (newline)
      (print (substring 
	      wp 
	      (- id-pos (string-length str-to-find))
	      (+ id-pos (string-length str-to-find))))
      (newline)))

;; get the table of observers
(define str-table-obs-to-end
  (substring wp
	     (+ id-pos (string-length str-to-find) 2)
	     (- (string-length wp) 1)))

;; find end of table
(set! str-to-find "</TABLE>")

(define table-end-pos (String-Contains str-table-obs-to-end str-to-find))

(if debug
    (begin
      (print table-end-pos)
      (newline)
      
      (print (substring 
	      str-table-obs-to-end
	      (- table-end-pos (string-length str-to-find))
	      (+ table-end-pos (string-length str-to-find))))
      (newline)))


;; TABLE of observers
(define str-table 
  (substring
   str-table-obs-to-end
   0
   (- table-end-pos 1)))

;; the observers table and the end of file
(define str-table-remaining str-table)


(define observer-code "")

;; function to return position after end of string to find
(define (return-pos-after-end-of-string str str-to-find)
  (+
   (String-Contains str str-to-find)
   (string-length str-to-find)))

;; function to get the string between two others one
(define (get-string-between-strings str str-before str-after)
  (substring str
	     (return-pos-after-end-of-string str str-before)
	     (String-Contains str str-after)))

(define (return-remaining-string-after-string str str-to-find)
  (substring str
	     (return-pos-after-end-of-string str str-to-find)
	     (string-length str)))

(define (is-end-of-TABLE? str)
  (string=? "</TABLE>" 
	    (substring str
		       0
		       (string-length "</TABLE>"))))

(define ew #f) ;; end while

;; (define begin-code-pos 0)
;; (define end-code-pos 0)

;; extract the observer code from TABLE DATA of TABLE ROW
;;(set! str-to-find "<TD DIR=LTR ALIGN=LEFT>")
;; (set! begin-code-pos
;;       (return-pos-after-end-of-string
;;        str-table-remaining
;;        "<TD DIR=LTR ALIGN=LEFT>"))

;; (set! end-code-pos
;;       (return-pos-after-end-of-string
;;        str-table-remaining
;;        "</TD>"))

(set! debug #f)

;; (do  
    
;;     ;; extract the observer code from TABLE DATA of TABLE ROW
;;     (set! observer-code
;; 	  (get-string-between-strings
;; 	   str-table-remaining
;; 	   "<TD DIR=LTR ALIGN=LEFT>"
;; 	   "</TD>"))
	  
;;     (if debug
;; 	(begin
;; 	  (print observer-code)
;; 	  #;(newline)))
	  
;;   ;; truncate the head of table to access the others observers the same way we already do it
;;   (set! str-table-remaining
;; 	(return-remaining-string-after-string str-table-remaining
;; 					      "</TR>"))

;;   while (not (is-end-of-TABLE? str-table-remaining))) ;; end DO WHILE 

(do-while  ew
	   
	   ;; extract the observer code from TABLE DATA of TABLE ROW
	   (set! observer-code
		 (get-string-between-strings
		  str-table-remaining
		  "<TD DIR=LTR ALIGN=LEFT>"
		  "</TD>"))
	   
	   (if debug
	       (begin
		 (print observer-code)
		 (if (string=? "ZUL" observer-code)
		     (print str-table-remaining))
		 #;(newline)))
	   
	   ;; truncate the head of table to access the others observers the same way we already do it
	   (set! str-table-remaining
		 (return-remaining-string-after-string str-table-remaining
						       "</TR>"))
	   
	   (if debug
	       (if (string=? "ZUL" observer-code)
		   (begin
		     (print "Near error")
		     (print str-table-remaining)
		     (print "str-table-remaining length=")
		     (print (string-length str-table-remaining))
		     #;(newline))))

	   ;;(set! ew (not (is-end-of-TABLE? str-table-remaining)))
	   (set! ew (not (< (string-length str-table-remaining) 20)))
	   
	   (print observer-code)
	   
	   ) ;; end DO WHILE 


(if debug
    (print str-table-remaining))

(if debug
    (print "Hello, world!"))

;;(print (current-date))
;;(js-eval "document.write(\"hello from javascript in biwascheme\");")

(console-log "biwascheme ok.")


;; That's all folks !!!!
