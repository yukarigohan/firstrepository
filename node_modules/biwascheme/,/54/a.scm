(define replace-split
  (lambda (str rep sub) 
    (begin
      ; ls: the internal representation fo the string
      ; being processed. I don't like using let
      ; simplicity is beauty
      (define ls (string->list str))
      ; check for EOL
      (if (eqv? '() (cdr ls))
        ; return the resulting list if EOL is reached
        ls
        (cond  
          ((eqv? (car ls) #\space) 
           (print 1)
           (replace-split (list->string (cdr ls)) rep sub))
          ((eqv? (car ls) rep) 
           (print 2)
           (cons 
             sub
             (replace-split (list->string (cdr ls)) rep sub)))
          (else 
            (print 3 (car ls))
            (cons 
              (car ls)
              (replace-split (list->string (cdr ls)) rep sub))))))))

;(write (replace-split "aeaeaeur" #\e #\a)) ;=> (a a a a a a u r)
(print "---")
;(write (replace-split "aea" #\e #\a))
(write (replace-split "aeae" #\e #\a))

