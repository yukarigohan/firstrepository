(import (scheme base) (scheme lazy) (scheme write))

(define-syntax stream-define
 (syntax-rules ()
  ((stream-define (name args ...)
                  body0 body1 ...)
   (define (name args ...)
    ;(delay (force
    (delay-force
     (begin body0 body1 ...))))))

(define-syntax stream-cons
  (syntax-rules ()
    ((_ obj strm) (delay (cons obj strm))))) 

(define (stream-null? strm) (null? (force strm)))
(define (stream-car strm) (car (force strm)))
(define (stream-cdr strm) (cdr (force strm)))

(define from0
  (let loop ((x 0))
    ;(delay (force
    (delay-force
      (stream-cons x (loop (+ x 1))))))

(stream-define (stream-filter pred? strm)
  (cond ((stream-null? strm) strm)
        ((pred? (stream-car strm))
          (stream-cons (stream-car strm)
                       (stream-filter pred? (stream-cdr strm))))
        (else (stream-filter pred? (stream-cdr strm)))))

(define (times3 n)
  (stream-car
    (stream-cdr
      (stream-cdr
        (stream-cdr
          (stream-cdr
            (stream-filter
              (lambda (x) (zero? (modulo x n)))
              from0)))))))

;(display (times3 1000000))

;(define p (delay (force p)))
;(define p (delay-force p))
;(force p)
(define (loop) (delay-force (loop)))
(force (loop))
