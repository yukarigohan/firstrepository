(import (scheme base) (scheme lazy) (scheme write))

; https://github.com/picrin-scheme/picrin/blob/dd75267f8e7e4fe066fe79ca063a73913cfab72c/contrib/20.r7rs/scheme/lazy.scm

; 1. picrinのforceはrecordベースで実装されていてboxがないため、
; new promiseを参照していたとき結果が更新されないのでは？
; (old promiseはちゃんと評価される)


(define x 0)
(define np (delay (begin
                    (set! x (+ x 1))
                    x)))

(define op (delay-force np))

(display (force op))(newline)
(display (force np))(newline)

; goshだと1 1になるけど、picrinだと1 2になる。
; np評価時にopがforce済みにならないため。

; 2. picrinのforceは (if (not (promise-done? promise)) の行がなく
; 常にpromise-update!をやるようになっている。
; このためreentrancy test 3に通らないはず -> やっぱり


(define flag #f)
(define p (delay (if flag
                   1
                   (begin
                     (set! flag #t)
                     (force p)
                     2))))
(display (force p))

;
;(define q
;  (let ((count 5))
;    (define (get-count) count)
;    (define p (delay (if (<= count 0)
;                         count
;                         (begin (set! count (- count 1))
;                                (force p)
;                                (set! count (+ count 2))
;                                count))))
;    (list get-count p)))
;(define get-count (car q))
;(define p (cadr q))
;
;(define (print x) (display x) (newline))
;(print (get-count))  ; =>   5
;(print (force p)   ) ; =>   0
;(print (get-count)  ); =>   10



;;;; Appendix A. Standard Libraries Lazy
;
;(define-library (scheme lazy)
;  (import (scheme base)
;	  (picrin macro))
;
;  (define-record-type <promise>
;      (make-promise% done value)
;      promise?
;    (done  promise-done? set-promise-done!)
;    (value promise-value set-promise-value!))
;
;  (define-syntax delay-force
;    (syntax-rules ()
;      ((_ expr)
;       (make-promise% #f (lambda () expr)))))
;
;  (define-syntax delay
;    (syntax-rules ()
;      ((_ expr)
;       (delay-force (make-promise% #t expr)))))
;
;  (define (force promise)
;    (if (promise-done? promise)
;	(promise-value promise)
;	(let ((new-promise ((promise-value promise))))
;          (set-promise-done!  promise (promise-done? new-promise))
;          (set-promise-value! promise (promise-value new-promise))
;          (force promise))))
;
;  (define (make-promise obj)
;    (if (promise? obj)
;	obj
;	(make-promise% #t obj)))
;
;  (export delay-force
;          delay
;          force
;          make-promise
;          promise?))
