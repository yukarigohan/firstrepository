;;=========================================================================
;; Reentrancy test 3: due to John Shutt
;
;(define q
;  (let ((count 5))
;    (define (get-count) count)
;    (define p (delay (if (<= count 0)
;                         count
;                         (begin (set! count (- count 1))
;                                (force p)
;                                (set! count (+ count 2))
;                                count))))
;    (list get-count p)))
;(define get-count (car q))
;(define p (cadr q))
;
;(print (get-count))  ; =>   5
;(print (force p))    ; =>   0
;(print (get-count) ) ; =>   10


(define-values (get-count p)
  (let ((count 5))
    (define (get-count) count)
    (define p (delay (if (<= count 0)
                         count
                         (begin (set! count (- count 1))
                                (force p)
                                (set! count (+ count 2))
                                count))))
    (values get-count p)))

(print (get-count))
; この時点ではpは何もされていないので、countは初期値5のまま。

(print (force p))
; ここでpをforceする。(if ...以下の評価が始まる。
;   countを-1する。4になる。
;   ここでpをforceする。え、いままさに評価中なんだけど...。
;   でも評価が終わったわけではないので、pはdoneになっていない。よって
;   (if...以下の評価が始まる。
;     countを-1する。3になる。
;     ...
;     これを繰り返すと
;     countを-1する。0になる。
;     ここでpをforceすると、ifの値が0になる。この0がpの値にもなる。
;     ...のだが、話はまだ終らない。forceの実行をbeginで待ってるやつが
;     いるんだよね。その待ってるやつはcountを+2するので2になる。
;     で、続いて+2,+2,+2,+2で最終的に10が、最初の(force p)の結果になりそう
;     な気がするが、そうじゃないんだよね？
;     これが例の(if (not (promise-done? か。
;

(print (get-count) ) ; =>   10
; 最後にcountが10になっていることを確認。

