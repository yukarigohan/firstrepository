(import (scheme base) (scheme lazy) (scheme write))
(define-syntax odd-stream-cons
  (syntax-rules ()
    ((_ item strm-expr) (cons item (delay strm-expr))))) 
(define-syntax even-stream-cons
  (syntax-rules ()
    ((_ item-expr strm-expr) (delay (cons item-expr strm-expr)))))

;; odd stream
(define odd-stream-null '())
(define (odd-stream-null? st)
  (null? st))
(define (odd-stream-car st)
  (car st))
(define (odd-stream-cdr st)
  (force (cdr st)))
; BiwaSchemeには今のところdefine-syntaxが無いのでdefine-macroで代用
;(define-macro (odd-stream-cons item strm-expr)
;  `(cons ,item (delay ,strm-expr)))
(define (odd-stream-map f st)
  (if (odd-stream-null? st)
    odd-stream-null
    (odd-stream-cons (f (odd-stream-car st))
                     (odd-stream-map f (odd-stream-cdr st)))))

(define (my-map f st)
  (if (null? st)
    '()
    (cons (f (car st))
          (my-map f (cdr st)))))

;; even stream
(define even-stream-null (delay '()))
(define (even-stream-null? st)
  (null? (force st)))
(define (even-stream-car st)
  (car (force st)))
(define (even-stream-cdr st)
  (cdr (force st)))
;(define-macro (even-stream-cons item-expr strm-expr)
;  `(delay (cons ,item-expr ,strm-expr)))
(define (even-stream-map f st)
  (delay (force
    (if (even-stream-null? st)
      even-stream-null
      (even-stream-cons (f (even-stream-car st))
                       (even-stream-map f (even-stream-cdr st)))))))

(define (odd-stream-from n)
  (odd-stream-cons n (odd-stream-from (+ n 1))))
(define (odd-stream-nth st n)
  (if (= n 0)
    (odd-stream-car st)
    (odd-stream-nth (odd-stream-cdr st) (- n 1))))
(define (even-stream-from n)
  (even-stream-cons n (even-stream-from (+ n 1))))
(define (even-stream-nth st n)
  (if (= n 0)
    (even-stream-car st)
    (even-stream-nth (even-stream-cdr st) (- n 1))))

; ----

(define (double x) (* x 2))

;(print (my-map sqrt '(1 2 3)))
;(display (odd-stream-nth (odd-stream-map double (odd-stream-from 1)) 100)) (newline)
;(display (even-stream-nth (even-stream-map double (even-stream-from 1)) 1000000)) (newline)

(define loop
  (delay (force loop)))
(force loop)
