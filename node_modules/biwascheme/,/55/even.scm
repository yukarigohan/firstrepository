(import (scheme base) (scheme lazy) (scheme write))
; EvenとOdd
;
; http://ksmakoto.hatenadiary.com/entry/2016/03/06/174938 に詳しい。
; - SRFI-40に説明があるらしい
;   "SICP の本文中で示されている（日本語版では p. 189 にある）実装はoddで、SRFI-40 のストリームはeven"
;
; http://srfi.schemers.org/srfi-45/srfi-45.html
; SRFI-45の例もEven。
;
; http://practical-scheme.net/gauche/man/gauche-refj_59.html#Delay_00e3_0081_00a8force_00e3_0081_00a8lazy
; "Gaucheの遅延シーケンスは、常にひとつ余分に評価します。 "
;
; https://www.shido.info/lisp/scheme_lazy.html
; こちらの例はOdd。
;
;
; Even Stream
; Stream = <Promise (obj . Stream)> or <Promise '()>

(define (ycar st)  ; Stream['a] -> 'a
  (car (force st)))
(define (ycdr st)  ; Stream['a] -> 'a
  (cdr (force st)))

(define ynull (delay '()))
(define (ynull? st) (null? (force st)))

(define-syntax ycons
  (syntax-rules ()
    ((ycons expr1 expr2)
     (delay (cons expr1 expr2)))))

(define (yfrom n)  ; Int -> Stream[Int]
  (ycons n (yfrom (+ n 1))))

(define (yhead st n)  ; Stream['a] -> Int -> List['a]
  (if (= n 0)
    '()
    (cons (ycar st) (yhead (ycdr st) (- n 1)))))

(define (ynth st n) ; Stream['a] -> Int -> 'a
  (if (= n 0)
    (ycar st)
    (ynth (ycdr st) (- n 1))))

(define (ymap f . sts)
  (if (memq '() sts)
    ynull
    (ycons (apply f (map ycar sts))
           (apply ymap f (map ycdr sts)))))

(define (ymap1 f st)
  (if (ynull? st)
    ynull
    (ycons (f (ycar st))
           (ymap1 f (ycdr st)))))

(define (ymap2 f . sts)
  (if (memq '() sts)
    ynull
    (ycons (apply f (map ycar sts))
           (apply ymap f (map ycdr sts)))))

(define yfib
  (ycons 1 (ycons 1 (ymap + yfib (ycdr yfib)))))

;(print (yhead (yfrom 3) 9))
;(write (ynth yfib 10000))


;; Gaucheだとなんか落ちないけどchibi-schemeだと ERROR: out of stack spaceになる
;(define loop
;  (delay (force loop)))
;(force loop)
