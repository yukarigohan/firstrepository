(write (syntax asdf)) (newline)
(write (syntax 'asdf)) (newline)
(write (syntax (define x 1))) (newline)

(define gvar 123)
(write (syntax gvar)) (newline)
  ;; #(syntax-object gvar ((top)) (hygiene guile-user))

(let ((lvar 234))
  (write (syntax lvar))) (newline)
  ; #(syntax-object lvar
  ;   ((top)
  ;    #(ribcage () () ())
  ;    #(ribcage #(lvar) #((top)) #("l-HetkSswgqBet4Fy5WT7MAM-212")))
  ;   (hygiene guile-user))

(define (foo arg)
  (write (syntax arg)) (newline))
(foo 345)
  ; #(syntax-object arg
  ;   ((top)
  ;    #(ribcage () () ())
  ;    #(ribcage #(arg) #((top)) #("l-HetkSswgqBet4Fy5WT7MAM-218")))
  ;   (hygiene guile-user))

;(write
;(syntax-case '(a 1) ()
;  ((_ x)
;   (syntax x)))
;)

;(display "syntax-case: ")(newline)
;(let ((c 1))
;  (write (syntax-case (list 'a 'b c) () 
;                      ((_ b c) (cons #'b #'c)))))


(display "syntax arg: ")(newline)
(define-syntax syn1
  (lambda (x) (write x)))
(let ((c 1))
  (write (syn1 a b c)))
       
