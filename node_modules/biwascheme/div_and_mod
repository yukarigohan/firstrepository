diff --git a/src/library/r6rs_lib.js b/src/library/r6rs_lib.js
index 67bd2d7..e19bdba 100644
--- a/src/library/r6rs_lib.js
+++ b/src/library/r6rs_lib.js
@@ -563,7 +563,7 @@ if( typeof(BiwaScheme)!='object' ) BiwaScheme={}; with(BiwaScheme) {
     return (n > 0) ? n - Math.floor(n / m) * m 
                    : n - Math.ceil(n / m) * m;
   }
-  define_libfunc("div0-and-mod0", 2, 2, function(ar){
+  define_libfunc("div-and-mod", 2, 2, function(ar){
     assert_number(ar[0]);
     assert_number(ar[1]);
     return new Values([div(ar[0], ar[1]), mod(ar[0], ar[1])]);
diff --git a/test/unit.js b/test/unit.js
index 6ed2611..a6c726d 100644
--- a/test/unit.js
+++ b/test/unit.js
@@ -697,6 +697,30 @@ describe('11.7 Arithmetic', {
     ev("(abs -7)").should_be(7);
     ev("(abs 7)").should_be(7);
   },
+  'div-and-mod': function(){
+    ew("(receive (x y) (div-and-mod 5  3) (list x y))").should_be("(1 2)");
+    ew("(receive (x y) (div-and-mod 5 -3) (list x y))").should_be("(-1 2)");
+  },
+  'div': function(){
+    ev("(div  5 3)").should_be(1);
+    ev("(div -5 3)").should_be(-1);
+  },
+  'mod': function(){
+    ev("(mod  5 3)").should_be(2);
+    ev("(mod -5 3)").should_be(2);
+  },
+  'div0-and-mod0': function(){
+    ew("(receive (x y) (div0-and-mod0 5  3) (list x y))").should_be("(2 -1)");
+    ew("(receive (x y) (div0-and-mod0 5 -3) (list x y))").should_be("(-2 -1)");
+  },
+  'div0': function(){
+    ev("(div0  5 3)").should_be(2);
+    ev("(div0 -5 3)").should_be(-2);
+  },
+  'mod0': function(){
+    ev("(mod0  5 3)").should_be(-1);
+    ev("(mod0 -5 3)").should_be(-1);
+  },
   'number->string' : function(){
     ev('(number->string 100)').should_be("100");
     ev('(number->string 32 16)').should_be("20");
